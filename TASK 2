class StudentGradeTracker:
    def __init__(self, student_name):
        self.student_name = student_name
        self.grades = {}

    def add_grade(self, subject, grade):
        self.grades[subject] = grade

    def calculate_average_grade(self):
        if not self.grades:
            return 0
        return sum(self.grades.values()) / len(self.grades)

    def get_letter_grade(self, average_grade):
        if average_grade >= 90:
            return "A"
        elif average_grade >= 80:
            return "B"
        elif average_grade >= 70:
            return "C"
        elif average_grade >= 60:
            return "D"
        else:
            return "F"

    def get_gpa(self, average_grade):
        if average_grade >= 90:
            return 4.0
        elif average_grade >= 80:
            return 3.0
        elif average_grade >= 70:
            return 2.0
        elif average_grade >= 60:
            return 1.0
        else:
            return 0.0

    def display_grades(self):
        print(f"Grades for {self.student_name}:")
        for subject, grade in self.grades.items():
            print(f"{subject}: {grade}")
        average_grade = self.calculate_average_grade()
        print(f"Average Grade: {average_grade:.2f}")
        print(f"Letter Grade: {self.get_letter_grade(average_grade)}")
        print(f"GPA: {self.get_gpa(average_grade):.1f}")

def main():
    student_name = input("Enter the student's name: ")
    tracker = StudentGradeTracker(student_name)

    while True:
        print("\nOptions:")
        print("1. Add grade")
        print("2. Display grades")
        print("3. Exit")
        choice = input("Enter your choice: ")

        if choice == "1":
            subject = input("Enter the subject: ")
            grade = float(input("Enter the grade: "))
            tracker.add_grade(subject, grade)
        elif choice == "2":
            tracker.display_grades()
        elif choice == "3":
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
